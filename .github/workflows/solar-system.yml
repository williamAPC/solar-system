name: Solar System Workflow


on:
    workflow_dispatch:
    push: 
        branches:
            - main
            - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    REPO_OWNER: $(echo 'console.log("${{ github.repository_owner }}".toLowerCase())' | node -)

jobs:
    unit-testing:
      name: Unit testing
      services:
        mongo-db:
          image: siddharth67/mongo-db:non-prod
          ports: 
            - 27017:27017

      env:
        MONGO_URI: 'mongodb://localhost:27017/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password
        REPO_OWNER: $(echo 'console.log("${{ github.repository_owner }}".toLowerCase())' | node -)
      
      strategy:
        matrix:
            nodejs_version: [18, 19, 20]
            operating_system: [ubuntu-latest, macos-latest]
            exclude:
                - nodejs_version: 18
                  operating_system: macos-latest
                - nodejs_version: 19
                  operating_system: macos-latest
                - nodejs_version: 19
                  operating_system: ubuntu-latest
                - nodejs_version: 20
                  operating_system: macos-latest
                - nodejs_version: 20
                  operating_system: ubuntu-latest
      runs-on: ${{ matrix.operating_system }}
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version - 18
        uses: actions/setup-node@v4
        with:
         node-version: ${{ matrix.nodejs_version}}

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        id : nodejs-unit-testing-step
        run: npm test
    
      - name: Archive Test Result
        if: failure() && steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
            name: Mocha-Test -${{ matrix.operating_system }}-${{ matrix.nodejs_version}}-Result
            path: test-results.xml
            retention-days: 1

    code-coverage:
        name: Code Coverage
        continue-on-error: true
        runs-on: ubuntu-latest
        container: 
          image: node:18
        services:
            mongo-db:
              image: siddharth67/mongo-db:non-prod
              options: 
                --name mongo

        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            # - name: Setup NodeJS Version - 18
            #   uses: actions/setup-node@v4
            #   with:
            #     node-version: 18
        
            - name: Cache NPM dependencies
              uses: actions/cache@v4
              with:
                  path: node_modules
                  key: ${{ runner.os }}_node-modules-${{ hashFiles('package-lock.json') }}

            - name: install Dependencies
              run: npm install

            - name: Check code Coverage
              run: npm run coverage
              continue-on-error: true

            - name: Archive test Result
              uses: actions/upload-artifact@v3
              with:
                name: Code-Coverage-Result
                path: coverage
                retention-days: 1

    dockerhub-Login:
      name: login in dockerHub
      needs: [unit-testing, code-coverage]
      permissions: 
        packages: write
      runs-on: ubuntu-latest
      steps:
        - name: Chekhout Repo
          uses: actions/checkout@v4

        - name: DockerHub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: GHCR Login
          uses: docker/login-action@v2.2.0
          with:
              registry: ghcr.io
              username: ${{ github.repository_owner }}
              password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker Build for Testing
          uses: docker/Build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: Docker Image Testing
          run: |
             docker images
             docker run --name olar-system-app -d \
             -p 3000:3000 \
             -e MONGO_URI=$MONGO_URI \
             -e MONGO_USERNAME=$MONGO_USERNAME \
             -e MONGO_PASSWORD=$MONGO_PASSWORD \
             ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
             echo Testing Image URL using wget
             wget -q -O - 127.0.0.1:3000/live | grep live
            #  export IP=$(docker inspect -f '{{ range .Networksettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            #  echo $IP
             
        # - name: Lowercase Repository-owner as a environnement variable
        #   run: |
        #      echo "repowner=${github.repository_owner}.toLowerCase()" >> "$GITHUB_ENV"
        #      echo $repowner
        #      echo $GITHUB_ENV

        - name: downcase REPO
          run: | 
               echo REPO=$(echo 'print("${{ github.repository_owner}}".lower())' | python3 -) >> $GITHUB_ENV
               echo $REPO
               echo ${{ env.REPO }}
               echo ${{ github.repository_owner }}
          


        - name: Container registriesPush
          uses: docker/Build-push-action@v4
          with:
               context: .
               push: true
               tags: |
                 ghcr.io/${{ env.REPO }}/solar-system:${{ github.sha }}
      # ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
      # ghcr.io/${{ github.repository_owner.lowercase }}/solar-system:${{ github.sha }}
      
    

    # aws-ecr-login:
    #    name: login-aws-ecr
    #    needs: [unit-testing, code-coverage]
    #    runs-on: ubuntu-latest
    #    steps:
    #    -
    #     name: Configure AWS Credentials
    #     uses: aws-actions/configure-aws-credentials@v1
    #     with:
    #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       aws-region: <region>
    #    -
    #     name: Login to ECR
    #     uses: docker/login-action@v2
    #     with:
    #       registry: ${{ secrets.AWS_ACCOUNT_NUMBER }}.dkr.ecr.<region>.amazonaws.com


